
* Class Diagram
#+BEGIN_SRC plantuml :file ClassDiagram.png
  hide empty members
  skinparam Linetype ortho
  skinparam groupInheritance 3
  skinparam scale 0.2

  namespace Game #AAAABB{
      class Map{
          Tile[] tiles;
          Entity[] entities;
          Character[] players;
      }   

      abstract class Tile{
          bool solid;
          vec2 position;
      }

      class Ground extends Tile
      class DestructibleWall extends Tile
      class IndestructibleWall extends Tile

      abstract Entity{
          vec2 position;

          tile[] get_map_solids();
          void move(vec2 delta);
      }

      class Character extends Entity{
          int lives;
          int speed;
          int immune_time;

          void place_bomb(map);
      }

      abstract class Enemy extends Entity{
          void auto_move();
      }

      class NonHostileEnemy extends Enemy
      class HostileEnemy extends Enemy
   

      Map *-- Tile
      Map *-- Enemy
      Map o-- Character
      Map <- Entity

      'Tile <|-- Ground
      'Tile <|-- DestructibleWall
      'Tile <|-- IndestructibleWall

      'Enemy <|-- NonHostileEnemy
      'Enemy <|-- HostileEnemy

      'Entity <|-- Character
      'Entity <|-- Enemy

      
  }

  namespace GUI #AADDAA{

      note as N1
      All of these extend either QWidget or QGraphicsItem.
      end note

      class MainWindow
      class QMap{
            void up();
            void left();
            void right();
            void down();
            void place();

            get_game_elements();
      }
      class QTile{
            QPixmap texture;
      }
      class QPowerup
      class QCharacter{
            Character character;
            QPixmap texture;
      }
      class QDraggableChar{
            bool active;
      }   

      QMap *-- QTile
      QMap *-- QCharacter
      QMap *-- QEnemy
      QMap *-- QPowerup

      MainWindow *-- QMap
      MainWindow *-- QDraggableChar

      MainWindow *-- QScoreWindow

  }

  'Game +-- GUI
  Game.Map o-down- GUI.QMap
#+END_SRC
  
#+RESULTS:
[[file:ClassDiagram.png]]

* Objectives

** DONE Smooth movement
   
** DONE Colissions

** DONE Animation

** DONE Threading with QTimers

** DONE Enemy generation

** DONE Unify into QEntity and QMobileEntity classes

** DONE Main menu and scores
Player 3 & 4 shouldn't happen

** DONE Implement tile explosions
** DONE Parametric number of lives
** DONE Get nearest empty spot for drop-in

** TODO [#B] Powerups
** TODO [#C] Fix enemy movement
** TODO Movable bombs

** TODO Difficulty increase
** TODO End game on No lives left
** TODO Hostile enemy -- Vision Range

** TODO Point addition:
- Enemies
- Seconds
- Walls

** TODO Player rankings
** TODO Pause game

** TODO Detect all collisions -- Including MAP EDGES
** TODO Remove 'parent' arg in QBomb, QEnemy, QPowerup
* Decisions
- Implemented Game using QGraphicsScene and QGraphicsItems
- Collisions are based on the bottom half of the sprite's bounding box
- Explosions extend to the very end but it's a matter of changing the function all_empty_tiles_in_sight to add a max number to change this.
