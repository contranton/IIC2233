* Headers							     :ignore:
# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/bigblow/css/hideshow.css"/>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
* MIDI system
Library for reading and writing midi files
Must support multiple channels (BONUS)
MIDINote class
MIDITrack class

** MIDI specification

*** Chunks
A MIDI chunk contains a 4 character ASCII type decalaration (by default we have 'MThd' and 'MTrk') followed by a 32-bit length (big endian) specification of the following bytes.
The standard allows for simple addition of information in future types, so we should be able to ignore the entire chunk if our program doesn't know how to deal with it.

There are *two* types of chunks:

**** Header Chunk
Always goes at the beginning of the file

Format is:
| Header Chunk | = |   | type   | length | format | ntrks | division |
|              |   |   | 'MThd' | 32-bit | 0,1,2  | N     |          |

The following data fields are always 16 bits (i.e., 2 bytes) long

***** Format numbers
      Format numbers define the overall organization and are specified as follows:

****** Format 0
       Single multi-channel track

       Header chunk is followed by a single track chunk
****** Format 1
       One or more simultaneous tracks

       Used typically for parallel playback
****** Format 2
       One ore more sequentially independent single-track patterns
       
       Typically used for selection of tracks independent from each other
***** ntrks
Number of tracks (always 1 for a format 0 file)

***** division
Has two formats depending on the most significant bit's value:

****** division[15] = 0
Rest of the word defines the number of ticks per *quarter note*
****** division[15] = 1
       Defines time base in SMTPE time code format which uhhh we won't worry about for now :3
**** Track Chunk
These are the same for all formats, and have the form
| type | length | MTrk event 0 | MTRK event 1 | ... |
Where type and length are defined as before, and each MTrk event has the form:
| delta time | event |
Delta time defines the time in ticks before the event is to be executed. It's variable-length with at least two bytes for non-0 values.
An event can be either of the following:
| MIDI event | sysex event | meta event |
We'll only be concerned with MIDI events, and as such we'll assume constant time signature and tempo of 4/4 and 120 bpm respectively.

The only meta event used is END OF TRACK, with signature =FF 2F 00=

*** Channels
A MIDI connection can carry 16 channels to allow for 16-voice polyphony

*** MIDI Events
A typical MIDI event is defined by three words:
| Message type | Note | Intensity |

For our purposes, we'll only use the Note ON/OFF types. Other messages involve changing parameters such as pressure, program, control, and will have arguments other than note/intensity.
**** Message Type
=XXXXnnnn=
Where XXXX is mapped as follows:
- 1000: Note OFF
- 1001: Note ON

And nnnn defines the channel on which to play the note

**** Note
A byte with MSB=0 (only 128 notes allowed) mapped according to:
[[./notes.png]]

**** Velocity
     
* Interface
* Web connectivity
Client-Server system.
Max 1024 byte message size
JSON messages.

** Diagram
#+BEGIN_SRC plantuml :file seqdiagram.png

  == MIDI Selection Menu== 

  group Begin Connection
        Client -> Server : Connect
        Server -> Client : List of MIDIs
  end

  alt Choose Midi
      Client -> Server : MIDI ID + username
      Server -> Client : Success + Midi Info

  else Create Midi
       Client -> Server : Null MIDI ID + midi name + username
       Server -> Server : Create new MIDI and update list
       Server -> Client : Success + Empty Midi info

  else Download Midi
       Client -> Server : MIDI ID
       Server -> Server : Turn MIDI Object to file
       Server -> Client : MIDI file

  end

  == Edit MIDI Menu == 

  group Multiple Client Sync
        Client2 -[#blue]> Server : Push Note Diff to Server
        Server -> Client2 : Note Diff
        Server -> Client : Note Diff
  end

  group Send Diff
        Client -> Server : Diff JSON
        Server -> Server : Process JSON and Sync
  end



#+END_SRC

#+RESULTS:
[[file:seqdiagram.png]]
** Message Standard NEED TO UPDATE THIS
*** Header
JSON field containing attributes of interest:
- Size of message
- Descriptor of the content

#+BEGIN_SRC python
  {'header': {'size': int,
              'description': str}}
#+END_SRC
*** Query from client
A query is sent from the client and immediately receives an associated response from the server. The format for the client-side request is:
#+BEGIN_SRC python
  {"action": str, "data": data}
#+END_SRC
Where /action/ encodes the function to be handled by the server and /data/ is an n-tuple containing the necessary arguments. An additional argument, =raw_bytes= is used by the query method to specify whether or not the response should be gotten as raw bytes instead of first being decoded by JSON. TODO: Do this server side

Responses not in bytes have the format:
#+BEGIN_SRC python
  {'content_type': str, 'data': Any}
#+END_SRC

Implemented queries are:
**** Download song
Request:
| Action     | Data       | Raw_Bytes |
| 'download' | title: str | True      |

Response:
MIDI file as bytes object
**** Edit song
Request:
| Action | Data                | Raw_Bytes |
| edit   | username, midi-name | False     |

Response:
| Content Type | Data |
| status       | bool | 

After this, server sends three messages:
| Content Type      | Data                        |
| connected_in_room | [username1, username2, ...] |

| Content Type | Data                      |
| chat_initial | [Message1, Message2, ...] |
(Message class has fields =time=, =sender=, and =content=)

| Content Type  | Data                |
| notes_initial | [Note1, Note2, ...] |
(Note class has fields =pitch=, =velocity=, =duration=)
**** Disconnect
Request:
| Action     | Data | Raw_Bytes |
| disconnect | NA   | NA        | 

Response:
NA  
*** Update from server
These are server messages sent without initial querying from the client and are used to update real-time systems such as the chat, the song list, and the notes (if simultaneous editing were to be implemented).

These messages have the same format as a typical non-bytes server response:
#+BEGIN_SRC python
  {'content_type': str, 'data': Any}
#+END_SRC

Current such messages are:
**** Update Midis list
| Content Type | Data                                            |
| midis_list   | {'edited': [midis...], 'available': [midis...]} |
**** Update room people
| Content Type      | Data       |
| connected_in_room | [names...] |
**** Update chat
After chat_initial is sent, all new messages, besides also being added to the messages db, is sent to every active client
#+BEGIN_SRC python
  if new_message:
      msg = get_new_message()
      for client in connected_clients:
          send(client, msg)
      self.messages.append(msg)
#+END_SRC
| Content Type | Data |
| chat_message | Message |
Where, as before, Message has fields =time=, =username=, =content=
**** Update Notes (not to be implemented in this version)
     Would contain a =NoteDiff= to synchronize changes made by other users on the same song.

* TODOS:

** Note diff sending

** Updating GUI from server pushes

** Chat and chat history storage for each song (apply serialization to store them!)

** Catch exceptions on server threads that might prevent them listening to their respective clients

** IFF there's time, make the song edition all cool like :D
